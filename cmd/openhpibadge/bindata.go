// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// intn/active.de.toml
// intn/active.en.toml
// intn/translate.de.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _intnActiveDeToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xbb\x6e\xdc\x38\x14\xed\xf5\x15\x82\x7b\x1b\x7c\x3f\x8a\xad\xd6\x5b\xed\x56\x9b\x00\x2e\x06\x29\x2e\x79\x2f\x67\x04\x2b\x54\x20\x71\x1c\x04\x03\xfe\x4d\x3e\x23\x9d\x7f\x2c\xd0\x8c\x67\x32\x56\x6c\xc7\x06\x92\x52\xe4\xb9\xe4\x79\x51\xab\x38\x6c\x73\xc1\xe1\x73\xfe\xd0\x6c\x60\xda\xb4\x7f\xb5\x17\xd3\x06\xf8\x65\x00\xab\x3d\x8b\x2e\xa9\xc0\x11\xa5\x27\x22\x70\x24\x0d\xd7\x42\x31\xf4\x3a\xca\x00\xd2\x45\xbc\x68\x86\x4c\xf3\xd4\x6e\xd7\xa5\xf6\xea\x9f\x8c\x84\xb5\x52\x46\x2a\xd4\xc2\xc7\x76\xb7\x9b\xd7\xae\xa1\x50\xad\xbb\x1d\xf5\x13\xb5\x33\xee\xff\x6d\xce\x5d\x5e\xd7\xda\xdf\x7f\xdd\xa6\xd2\x4e\xd4\x95\x19\x7b\x0d\x5f\xa6\xd3\x5e\xfb\x1e\xd6\x87\x99\x5a\xa7\x02\x63\xa1\xd2\x76\xf9\x08\xfb\x8f\x52\x39\x61\x32\xd6\x7a\xd1\x0c\x65\x43\xe3\x1f\x24\x43\xf9\x35\x74\xf6\xa8\x03\xa1\x66\x85\xdb\x11\x4a\x37\x2c\xed\x95\x14\x92\xe4\x3a\xa1\x48\x2a\x68\xc6\x13\x60\x8a\x2e\x06\xaf\x1d\xb9\xa4\x41\x68\xc1\xa2\x05\x79\x66\xef\xd5\x0d\xd1\xed\x54\x6b\x7b\x33\xc4\x0d\xe5\x47\x6a\x7f\xda\x6b\x56\x94\xf1\x12\xa1\xd0\xe2\x62\x81\x32\xba\x64\xac\x92\xce\x07\x17\x48\x3b\x19\xa2\x8b\x14\xc1\x72\xcd\x9c\xb5\xc1\xba\x24\xbd\x7b\x29\xd7\xa3\x09\xfb\xaf\x07\xad\x0f\xf6\x1e\xbc\x7d\x39\x89\x57\x8c\xcf\xf4\xc7\xa1\xef\x09\x17\xf4\x9d\x8b\xce\x22\x28\xc6\x15\x4a\x13\x99\xd1\x92\x0c\x17\x46\x49\x16\x94\x15\x5a\x73\x69\xc0\x24\x7b\xee\xdb\xdf\x73\xc5\x6b\x6d\xa9\xcb\x6b\x9a\xe2\x66\xec\x28\x2c\xfd\x7b\x0e\xd3\xac\x7a\xc8\xeb\x2d\xac\x97\x3e\x12\xe7\x5a\xc8\xa8\x53\x12\x32\x45\x6e\x18\x83\x08\x02\x1d\x91\x06\x0c\x5a\x89\xa8\x23\xa9\xf0\x23\xc0\x77\x9f\x46\x88\x1b\x3a\xbb\xf6\xb4\xd2\xac\xf6\x75\x7a\x2a\x2e\x48\xd2\x18\x4c\x9e\x93\xb0\x8e\xa3\x93\xca\x78\xc6\x9d\xb0\x14\x19\x93\x5c\x87\xc4\x23\x43\x7a\x26\xae\x87\x96\xd2\xa2\xb5\x6f\x89\xec\x4d\x47\xec\x85\x94\xed\xb4\x10\xc1\x41\x5b\x6f\x02\x41\x48\x9e\x92\x14\x2e\x31\x11\x13\x37\x86\x01\x91\x20\x69\xbd\x24\xf2\x9c\x3f\x2d\x02\xc2\x3e\x91\x7e\x98\xa6\xe3\xfb\x7b\xfc\x6a\xe1\xb6\x74\x77\x47\x7e\x01\x7a\x6c\xef\x68\x4c\xf7\xdf\xd6\x01\xc6\x5f\xfc\x1a\x7e\xcf\xd9\xcd\xaa\x74\xa5\x5f\x46\xa7\x1c\xf3\xda\xf0\x20\x95\x74\x2a\x45\xc6\xe7\xde\xa2\xa0\x14\xbd\x44\xeb\x23\x48\xf4\x8c\x84\x38\xa9\xfe\x77\x3b\x4e\x67\x44\x0f\x9f\xdf\x03\x00\x00\xff\xff\x1b\x68\xdf\x3d\xa1\x05\x00\x00")

func intnActiveDeTomlBytes() ([]byte, error) {
	return bindataRead(
		_intnActiveDeToml,
		"intn/active.de.toml",
	)
}

func intnActiveDeToml() (*asset, error) {
	bytes, err := intnActiveDeTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "intn/active.de.toml", size: 1441, mode: os.FileMode(436), modTime: time.Unix(1596315330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _intnActiveEnToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x52\xbb\x6e\xc3\x30\x0c\xdc\xf5\x15\x42\xf6\xe6\x0f\x3a\x35\xdd\x3a\x75\xe9\x60\x74\x10\x42\xda\x35\xa2\x52\x85\x48\x21\x08\x04\xfe\x7b\x21\x1b\xf2\x03\x2d\x1c\xa3\x40\x27\x5b\x3c\x9e\x74\x77\x64\x73\x0e\x89\x04\xc2\x95\xde\x4d\x20\xb4\x8f\xf6\x90\x73\xdf\xda\xe3\x33\x01\x82\x2a\x96\x8f\xcd\xb9\x9c\x4f\x4e\x50\x35\x67\xf4\x8c\xb6\xf4\xbc\x26\xa2\x9e\x3a\xd5\x38\xfe\xd8\x36\xc4\xd2\x7b\x72\x37\x9e\x30\x0b\xee\x36\x72\x54\x59\x5c\x14\xb6\x3d\xd5\xae\x17\x6c\x65\x6a\x21\x50\x3d\x98\x20\x1f\x18\xff\x49\x07\xef\x10\xc2\x93\x12\xd3\x40\x8a\x4e\xfa\xb0\xcc\xe6\xf8\x86\x78\x61\x55\x7b\x45\xbc\xac\xd4\xae\x10\x2e\x74\x24\x78\x00\x27\xb8\x11\x6d\x15\x84\x04\xf5\xe1\x51\x52\xb1\xb8\x19\xc6\x1d\x66\x79\x3d\x06\xef\x11\x96\xe2\x9f\xca\xb4\x55\x6d\xc5\xd6\x06\x7e\xa2\xa6\xf1\x8e\xba\xe4\xba\xd9\x43\x2d\x2c\xa8\x73\xc9\x34\x43\xb2\x1b\xae\x07\x7c\x56\x3f\x0e\x62\xb7\xf3\xbd\xec\x41\x87\x24\xbe\x9b\xfc\xaf\xfb\x53\xaf\x3f\x87\xcf\xb2\x4d\xe9\x6b\xcf\x72\xfe\xe9\x3e\xd3\x48\x2f\x7e\x8e\xea\x1c\x52\xe4\x65\xb4\xb5\xf0\x1d\x00\x00\xff\xff\x17\x22\xc4\xf3\xa8\x03\x00\x00")

func intnActiveEnTomlBytes() ([]byte, error) {
	return bindataRead(
		_intnActiveEnToml,
		"intn/active.en.toml",
	)
}

func intnActiveEnToml() (*asset, error) {
	bytes, err := intnActiveEnTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "intn/active.en.toml", size: 936, mode: os.FileMode(436), modTime: time.Unix(1596315330, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _intnTranslateDeToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xbd\x8e\x13\x31\x14\x85\xfb\x79\x0a\x2b\xfd\x22\x7b\x9c\x19\xdb\x05\xdd\xd2\x51\x21\xba\x88\xe2\xda\xf7\x38\x33\x22\x78\xa4\xd8\x59\x84\x46\x7e\x1b\x1e\x83\x6e\x5f\x0c\xe5\x67\x56\x22\x5a\x96\x8d\xc4\x96\xb6\xcf\xbd\x3e\xdf\xd1\xd9\x84\xe9\x90\x0a\x4f\xdf\xd3\x97\x66\xa0\x3c\x88\xf7\x62\x95\x07\x52\x77\x9e\x4c\xe7\x64\xb0\x71\xed\x15\xb3\x76\x00\xc8\x42\xf7\xaa\x6b\xd7\x92\x5d\x17\xb4\x27\x6d\x03\xaf\x9a\x29\xe1\x38\x35\xcf\x63\x14\xef\x3e\x24\x06\xd7\x8a\xc4\x28\x10\xf4\x4d\xcc\xf3\xf1\xee\x9e\x0a\x6a\x9d\x67\xec\x32\xc4\x51\xf7\xe9\x90\xd2\x98\xb6\xb5\xee\x1e\x7f\x1e\x62\x11\x19\x63\x39\x6a\xef\xe9\x47\x7e\x7a\x13\x9f\x69\x7b\x9e\xa9\x35\x17\xda\x17\x14\x31\xa6\x45\xf6\x11\xb1\x3c\x69\x12\xd7\xba\x6a\xa6\x32\x60\xff\x86\x66\x90\x5e\x63\xe7\xa4\x3a\x1b\x6a\x36\x48\x7c\xc7\x54\x70\x15\x6f\xcb\x3a\xd8\xd8\x9b\xb5\xb6\xce\x5b\x8f\xce\x6a\x1f\x6c\x40\x20\xa3\x3a\x69\x8d\xf1\xc6\x46\xed\xec\x4b\xf1\x2e\x5e\x4e\xa7\xcb\x97\x17\xca\x33\xe2\xcb\x81\xbc\x62\xbc\xd9\x9c\x38\x9f\x03\xa0\xa8\xfb\x9e\xa3\x53\x68\x8d\x55\x6c\xf5\xba\x77\x52\xd9\xd6\x20\x48\xa9\x55\xe7\xa3\x0a\x92\xf1\x17\x80\x4b\x7c\xb8\x8a\xf3\x16\x88\x9b\x56\x9c\x40\xca\x21\x5f\x41\x28\xea\x8c\xeb\x3d\xc8\x47\x87\xa8\x5b\x1b\x65\x1b\xa2\xea\x7b\x49\x40\x0b\x6d\x9c\x06\x9c\x52\xcf\x43\x90\xdf\x22\x87\x61\x37\xe5\xbc\x14\xe3\xcf\x3a\xd1\xd7\x32\x3e\x2c\xfe\x3c\xed\x58\x3c\x60\x1f\x1f\x7f\x6d\x3d\xed\xff\xd1\xd9\xff\xb3\xfb\x77\x00\x00\x00\xff\xff\xa8\x83\xb3\x2d\xde\x03\x00\x00")

func intnTranslateDeTomlBytes() ([]byte, error) {
	return bindataRead(
		_intnTranslateDeToml,
		"intn/translate.de.toml",
	)
}

func intnTranslateDeToml() (*asset, error) {
	bytes, err := intnTranslateDeTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "intn/translate.de.toml", size: 990, mode: os.FileMode(436), modTime: time.Unix(1596315287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"intn/active.de.toml":    intnActiveDeToml,
	"intn/active.en.toml":    intnActiveEnToml,
	"intn/translate.de.toml": intnTranslateDeToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"intn": &bintree{nil, map[string]*bintree{
		"active.de.toml":    &bintree{intnActiveDeToml, map[string]*bintree{}},
		"active.en.toml":    &bintree{intnActiveEnToml, map[string]*bintree{}},
		"translate.de.toml": &bintree{intnTranslateDeToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
